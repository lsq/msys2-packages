diff -aurN -x '\.git' 0000/mesonbuild/_pathlib.py 0001/mesonbuild/_pathlib.py
--- 0000/mesonbuild/_pathlib.py
+++ 0001/mesonbuild/_pathlib.py
@@ -28,12 +28,14 @@
     'PurePath',
     'PurePosixPath',
     'PureWindowsPath',
+    'WindowsPath'
     'Path',
 ]
 
 PurePath = pathlib.PurePath
 PurePosixPath = pathlib.PurePosixPath
 PureWindowsPath = pathlib.PureWindowsPath
+WindowsPath = pathlib.WindowsPath
 
 # Only patch on platforms where the bug occurs
 if platform.system().lower() in {'windows'}:
diff -aurN -x '\.git' 0000/mesonbuild/programs.py 0001/mesonbuild/programs.py
--- 0000/mesonbuild/programs.py
+++ 0001/mesonbuild/programs.py
@@ -11,8 +11,11 @@
 import stat
 import sys
 import re
+import traceback
 import typing as T
 from pathlib import Path
+from pathlib import WindowsPath
+import subprocess
 
 from . import mesonlib
 from . import mlog
@@ -182,7 +185,11 @@
         return ExternalProgram(command, silent=True)
 
     @staticmethod
-    def _shebang_to_cmd(script: str) -> T.Optional[T.List[str]]:
+    def _get_win_path(cyg_path):
+        return subprocess.check_output(["cygpath", "-w", cyg_path]).strip(b"\n").decode()
+
+    @staticmethod
+    def _shebang_to_cmd(self, script: str) -> T.Optional[T.List[str]]:
         """
         Check if the file has a shebang and manually parse it to figure out
         the interpreter to use. This is useful if the script is not executable
@@ -197,11 +204,15 @@
                 # the single argument to pass to that command. So we must split
                 # exactly once.
                 commands = first_line[2:].split('#')[0].strip().split(maxsplit=1)
+                # print(f'program: _shebang_to_cmd: command: {commands}')
+                # print(f'program: _shebang_to_cmd: script: { script}')
                 if mesonlib.is_windows():
                     # Windows does not have UNIX paths so remove them,
                     # but don't remove Windows paths
                     if commands[0].startswith('/'):
-                        commands[0] = commands[0].split('/')[-1]
+                        # commands[0] = commands[0].split('/')[-1]
+                        # commands[0] = str(WindowsPath(commands[0]))
+                        commands[0] = self._get_win_path(commands[0])
                     if len(commands) > 0 and commands[0] == 'env':
                         commands = commands[1:]
                     # Windows does not ship python3.exe, but we know the path to it
@@ -222,6 +233,7 @@
                         commands = mesonlib.python_command + commands[2:]
                     elif commands[0].split('/')[-1] == 'python3':
                         commands = mesonlib.python_command + commands[1:]
+                # traceback.print_stack()
                 return commands + [script]
         except Exception as e:
             mlog.debug(str(e))
@@ -241,6 +253,7 @@
     def _search_dir(self, name: str, search_dir: T.Optional[str]) -> T.Optional[list]:
         if search_dir is None:
             return None
+        # print(f'search dir: {name, search_dir}')
         trial = os.path.join(search_dir, name)
         if os.path.exists(trial):
             if self._is_executable(trial):
